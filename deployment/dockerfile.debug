# Stage 1: Build the Go binary with debugging support
FROM golang:1.22 AS builder

WORKDIR /app

# Copy and download dependencies
COPY go.mod go.sum ./
RUN go mod download

# Copy the application code
COPY . .

# Install Delve
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# Build the server binary with Delve debug info
RUN go build -gcflags "all=-N -l" -o server ./cmd/gophermart

# Stage 2: Create a lightweight container with the built binary
FROM alpine:3.18

WORKDIR /app

# Install libc6-compat for compatibility with binaries built with glibc
RUN apk add --no-cache libc6-compat

# Copy the compiled server binary and any required files (e.g., .env files)
COPY --from=builder /app/server /app/server
COPY --from=builder /go/bin/dlv /usr/local/bin/dlv
COPY .env /app/.env
COPY /migrations /app/migrations

# Expose the port the server listens on, and the Delve debugging port
EXPOSE 8082 40000

# Run the server application with Delve
CMD ["dlv", "exec", "/app/server", "--headless", "--listen=:40000", "--api-version=2", "--log", "--accept-multiclient"]