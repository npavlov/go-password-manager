version: "3.9"

services:
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=yourpassword  # Replace with a strong password
      - POSTGRES_DB=yourdb
    ports:
      - "5432:5432"  # Expose PostgreSQL for host machine access (optional)
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10

  redis:
    image: redis:7
    ports:
      - "6379:6379"  # Expose Redis for host machine access (optional)
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:3
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"  # Kafka broker port
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"  # Zookeeper port
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:1.46
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411  # Enable Zipkin endpoint
    ports:
      - "5775:5775/udp"    # UDP port for jaeger-agent
      - "6831:6831/udp"    # UDP port for agent with compact Thrift protocol
      - "6832:6832/udp"    # UDP port for agent with binary Thrift protocol
      - "5778:5778"        # HTTP port for agent configuration
      - "16686:16686"      # HTTP port for Jaeger UI
      - "14268:14268"      # HTTP port for collector
      - "14250:14250"      # GRPC port for collector
      - "9411:9411"        # HTTP port for Zipkin compatibility
    networks:
      - app-network

  server:
    build:
      context: ..
      dockerfile: ./deployment/dockerfile
    networks:
      - app-network
    ports:
      - "8082:8082"    # Server application port
    environment:
      - RUN_ADDRESS=server:8082  # Replace with the address your server listens on
      - DATABASE_URI=postgres://postgres:yourpassword@postgres:5432/yourdb?sslmode=disable
      - JWT_SECRET=random
      - REDIS=redis:6379  # Redis hostname and port
      - KAFKA=kafka:9092  # Kafka broker hostname and port
      - JAEGER_ENDPOINT=jaeger:4318
      - ACCRUAL_SYSTEM_ADDRESS=accrual:8080
    command: /app/server

  accrual:
    build:
      context: ..
      dockerfile: ./deployment/dockerfile.accrual
    networks:
      - app-network
    ports:
      - "8080:8080"    # Accrual application port
    command: /app/accrual_linux_amd64

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - SERVER_PORT=9000
      - JVM_OPTS=-Xms32M -Xmx64M
    depends_on:
      - kafka
    ports:
      - "9000:9000"  # Kafdrop UI port
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
