// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreatePasswordEntry = `-- name: CreatePasswordEntry :one
INSERT INTO passwords (user_id, name, login, password)
VALUES ($1, $2, $3, $4)
    ON CONFLICT (user_id, name) DO NOTHING
RETURNING id, user_id, name, login, password, created_at, updated_at
`

type CreatePasswordEntryParams struct {
	UserID   pgtype.UUID `db:"user_id"`
	Name     string      `db:"name"`
	Login    string      `db:"login"`
	Password string      `db:"password"`
}

func (q *Queries) CreatePasswordEntry(ctx context.Context, arg CreatePasswordEntryParams) (Password, error) {
	row := q.db.QueryRow(ctx, CreatePasswordEntry,
		arg.UserID,
		arg.Name,
		arg.Login,
		arg.Password,
	)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (username, password, encryption_key, email)
VALUES ($1, $2, $3, $4)
    RETURNING id, username, email, password, encryption_key
`

type CreateUserParams struct {
	Username      string `db:"username"`
	Password      string `db:"password"`
	EncryptionKey string `db:"encryption_key"`
	Email         string `db:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.Username,
		arg.Password,
		arg.EncryptionKey,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.EncryptionKey,
	)
	return i, err
}

const DeletePasswordEntry = `-- name: DeletePasswordEntry :exec
DELETE FROM passwords
WHERE id = $1
`

func (q *Queries) DeletePasswordEntry(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeletePasswordEntry, id)
	return err
}

const GetPasswordEntriesByUserID = `-- name: GetPasswordEntriesByUserID :many
SELECT id, user_id, name, login, password, created_at, updated_at FROM passwords
WHERE user_id = $1
`

func (q *Queries) GetPasswordEntriesByUserID(ctx context.Context, userID pgtype.UUID) ([]Password, error) {
	rows, err := q.db.Query(ctx, GetPasswordEntriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Password
	for rows.Next() {
		var i Password
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Login,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetPasswordEntryByID = `-- name: GetPasswordEntryByID :one
SELECT id, user_id, name, login, password, created_at, updated_at FROM passwords
WHERE id = $1
`

func (q *Queries) GetPasswordEntryByID(ctx context.Context, id pgtype.UUID) (Password, error) {
	row := q.db.QueryRow(ctx, GetPasswordEntryByID, id)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, encryption_key FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, GetUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.EncryptionKey,
	)
	return i, err
}

const GetUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password, encryption_key FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, GetUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.EncryptionKey,
	)
	return i, err
}

const UpdatePasswordEntry = `-- name: UpdatePasswordEntry :one
UPDATE passwords
SET name = $1, login = $2, password = $3
WHERE id = $4
    RETURNING id, user_id, name, login, password, created_at, updated_at
`

type UpdatePasswordEntryParams struct {
	Name     string      `db:"name"`
	Login    string      `db:"login"`
	Password string      `db:"password"`
	ID       pgtype.UUID `db:"id"`
}

func (q *Queries) UpdatePasswordEntry(ctx context.Context, arg UpdatePasswordEntryParams) (Password, error) {
	row := q.db.QueryRow(ctx, UpdatePasswordEntry,
		arg.Name,
		arg.Login,
		arg.Password,
		arg.ID,
	)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
