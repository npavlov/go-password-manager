syntax = "proto3";

package proto.note;

// Go package option for generated code
option go_package = "github.com/npavlov/go-password-manager/gen/note";

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

//
// NoteService provides operations for storing, retrieving,
// listing, and deleting secure notes.
//
service NoteService {
    // Store a new note or update an existing one.
    rpc StoreNoteV1 (StoreNoteV1Request) returns (StoreNoteV1Response);

    // Retrieve a single note by its ID.
    rpc GetNoteV1 (GetNoteV1Request) returns (GetNoteV1Response);

    // Retrieve all stored notes.
    rpc GetNotesV1 (GetNotesV1Request) returns (GetNotesV1Response);

    // Delete a note by its ID.
    rpc DeleteNoteV1 (DeleteNoteV1Request) returns (DeleteNoteV1Response);
}

//
// Request to store or update a secure note.
//
message StoreNoteV1Request {
    // Note data to store.
    NoteData note = 1;
}

//
// Response after storing a note.
//
message StoreNoteV1Response {
    // ID of the newly created or updated note.
    string note_id = 1;
}

//
// Request to get all stored notes.
//
message GetNotesV1Request {
}

//
// Response containing a list of all stored notes.
//
message GetNotesV1Response {
    // List of notes.
    repeated NoteData notes = 1;
}

//
// Request to retrieve a single note.
//
message GetNoteV1Request {
    // ID of the note to retrieve (UUID format).
    string note_id = 1 [(buf.validate.field).string.uuid = true];
}

//
// Response containing the note and its last update timestamp.
//
message GetNoteV1Response {
    // Retrieved note data.
    NoteData note = 1;

    // Timestamp of the most recent update.
    google.protobuf.Timestamp last_update = 2;
}

//
// Request to delete a note.
//
message DeleteNoteV1Request {
    // ID of the note to delete (UUID format).
    string note_id = 1 [(buf.validate.field).string.uuid = true];
}

//
// Response after deleting a note.
//
message DeleteNoteV1Response {
    // True if the note was successfully deleted.
    bool ok = 1;
}

//
// Data structure representing a secure note.
//
message NoteData {
    // Content of the note (minimum 3 characters).
    string content = 1 [(buf.validate.field).string.min_len = 3];
}