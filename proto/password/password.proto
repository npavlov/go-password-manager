syntax = "proto3";

package proto.password;

// Go package option for generated code
option go_package = "github.com/npavlov/go-password-manager/gen/password";

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

//
// PasswordService provides methods for securely managing user passwords,
// including storing, retrieving, updating, and deleting password entries.
//
service PasswordService {
  // Store a new password entry.
  rpc StorePasswordV1 (StorePasswordV1Request) returns (StorePasswordV1Response);

  // Retrieve a single password entry by its ID.
  rpc GetPasswordV1 (GetPasswordV1Request) returns (GetPasswordV1Response);

  // Retrieve all stored password entries.
  rpc GetPasswordsV1 (GetPasswordsV1Request) returns (GetPasswordsV1Response);

  // Update an existing password entry.
  rpc UpdatePasswordV1 (UpdatePasswordV1Request) returns (UpdatePasswordV1Response);

  // Delete a password entry by its ID.
  rpc DeletePasswordV1 (DeletePasswordV1Request) returns (DeletePasswordV1Response);
}

//
// Request to store a new password.
//
message StorePasswordV1Request {
  // Password data to store.
  PasswordData password = 1 [(buf.validate.field).required = true];
}

//
// Response containing the ID of the stored password.
//
message StorePasswordV1Response {
  // Unique ID of the stored password entry.
  string password_id = 1;
}

//
// Request to retrieve all passwords.
//
message GetPasswordsV1Request {
}

//
// Response containing a list of all stored passwords.
//
message GetPasswordsV1Response {
  // List of password entries.
  repeated PasswordData passwords = 1;
}

//
// Request to retrieve a specific password by ID.
//
message GetPasswordV1Request {
  // UUID of the password entry to retrieve.
  string password_id = 1 [(buf.validate.field).string.uuid = true];
}

//
// Response containing the password entry and its last update time.
//
message GetPasswordV1Response {
  // Password data.
  PasswordData password = 1;

  // Last time the password entry was updated.
  google.protobuf.Timestamp last_update = 2;
}

//
// Request to update a password entry.
//
message UpdatePasswordV1Request {
  // UUID of the password entry to update.
  string password_id = 1 [(buf.validate.field).string.uuid = true];

  // New password data to store.
  PasswordData data = 2 [(buf.validate.field).required = true];
}

//
// Response containing the ID of the updated password.
//
message UpdatePasswordV1Response {
  // UUID of the updated password entry.
  string password_id = 1;
}

//
// Request to delete a password entry.
//
message DeletePasswordV1Request {
  // UUID of the password entry to delete.
  string password_id = 1 [(buf.validate.field).string.uuid = true];
}

//
// Response confirming the deletion status.
//
message DeletePasswordV1Response {
  // True if the password was successfully deleted.
  bool ok = 1;
}

//
// PasswordData represents the structure of a stored credential.
//
message PasswordData {
  // Login or username (minimum 3 characters).
  string login = 1 [(buf.validate.field).string.min_len = 3];

  // Password value (minimum 3 characters).
  string password = 2 [(buf.validate.field).string.min_len = 3];

  // Optional metadata (e.g., website, category, custom tags).
  map<string, string> metadata = 3;
}