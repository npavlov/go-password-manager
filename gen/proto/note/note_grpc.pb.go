// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/note/note.proto

package note

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NoteService_StoreNoteV1_FullMethodName  = "/proto.note.NoteService/StoreNoteV1"
	NoteService_GetNoteV1_FullMethodName    = "/proto.note.NoteService/GetNoteV1"
	NoteService_GetNotesV1_FullMethodName   = "/proto.note.NoteService/GetNotesV1"
	NoteService_DeleteNoteV1_FullMethodName = "/proto.note.NoteService/DeleteNoteV1"
)

// NoteServiceClient is the client API for NoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NoteService provides operations for storing, retrieving,
// listing, and deleting secure notes.
type NoteServiceClient interface {
	// Store a new note or update an existing one.
	StoreNoteV1(ctx context.Context, in *StoreNoteV1Request, opts ...grpc.CallOption) (*StoreNoteV1Response, error)
	// Retrieve a single note by its ID.
	GetNoteV1(ctx context.Context, in *GetNoteV1Request, opts ...grpc.CallOption) (*GetNoteV1Response, error)
	// Retrieve all stored notes.
	GetNotesV1(ctx context.Context, in *GetNotesV1Request, opts ...grpc.CallOption) (*GetNotesV1Response, error)
	// Delete a note by its ID.
	DeleteNoteV1(ctx context.Context, in *DeleteNoteV1Request, opts ...grpc.CallOption) (*DeleteNoteV1Response, error)
}

type noteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteServiceClient(cc grpc.ClientConnInterface) NoteServiceClient {
	return &noteServiceClient{cc}
}

func (c *noteServiceClient) StoreNoteV1(ctx context.Context, in *StoreNoteV1Request, opts ...grpc.CallOption) (*StoreNoteV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreNoteV1Response)
	err := c.cc.Invoke(ctx, NoteService_StoreNoteV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) GetNoteV1(ctx context.Context, in *GetNoteV1Request, opts ...grpc.CallOption) (*GetNoteV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNoteV1Response)
	err := c.cc.Invoke(ctx, NoteService_GetNoteV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) GetNotesV1(ctx context.Context, in *GetNotesV1Request, opts ...grpc.CallOption) (*GetNotesV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotesV1Response)
	err := c.cc.Invoke(ctx, NoteService_GetNotesV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) DeleteNoteV1(ctx context.Context, in *DeleteNoteV1Request, opts ...grpc.CallOption) (*DeleteNoteV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNoteV1Response)
	err := c.cc.Invoke(ctx, NoteService_DeleteNoteV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteServiceServer is the server API for NoteService service.
// All implementations must embed UnimplementedNoteServiceServer
// for forward compatibility.
//
// NoteService provides operations for storing, retrieving,
// listing, and deleting secure notes.
type NoteServiceServer interface {
	// Store a new note or update an existing one.
	StoreNoteV1(context.Context, *StoreNoteV1Request) (*StoreNoteV1Response, error)
	// Retrieve a single note by its ID.
	GetNoteV1(context.Context, *GetNoteV1Request) (*GetNoteV1Response, error)
	// Retrieve all stored notes.
	GetNotesV1(context.Context, *GetNotesV1Request) (*GetNotesV1Response, error)
	// Delete a note by its ID.
	DeleteNoteV1(context.Context, *DeleteNoteV1Request) (*DeleteNoteV1Response, error)
	mustEmbedUnimplementedNoteServiceServer()
}

// UnimplementedNoteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNoteServiceServer struct{}

func (UnimplementedNoteServiceServer) StoreNoteV1(context.Context, *StoreNoteV1Request) (*StoreNoteV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreNoteV1 not implemented")
}
func (UnimplementedNoteServiceServer) GetNoteV1(context.Context, *GetNoteV1Request) (*GetNoteV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteV1 not implemented")
}
func (UnimplementedNoteServiceServer) GetNotesV1(context.Context, *GetNotesV1Request) (*GetNotesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotesV1 not implemented")
}
func (UnimplementedNoteServiceServer) DeleteNoteV1(context.Context, *DeleteNoteV1Request) (*DeleteNoteV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNoteV1 not implemented")
}
func (UnimplementedNoteServiceServer) mustEmbedUnimplementedNoteServiceServer() {}
func (UnimplementedNoteServiceServer) testEmbeddedByValue()                     {}

// UnsafeNoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteServiceServer will
// result in compilation errors.
type UnsafeNoteServiceServer interface {
	mustEmbedUnimplementedNoteServiceServer()
}

func RegisterNoteServiceServer(s grpc.ServiceRegistrar, srv NoteServiceServer) {
	// If the following call pancis, it indicates UnimplementedNoteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NoteService_ServiceDesc, srv)
}

func _NoteService_StoreNoteV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreNoteV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).StoreNoteV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_StoreNoteV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).StoreNoteV1(ctx, req.(*StoreNoteV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_GetNoteV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).GetNoteV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_GetNoteV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).GetNoteV1(ctx, req.(*GetNoteV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_GetNotesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).GetNotesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_GetNotesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).GetNotesV1(ctx, req.(*GetNotesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_DeleteNoteV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).DeleteNoteV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_DeleteNoteV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).DeleteNoteV1(ctx, req.(*DeleteNoteV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteService_ServiceDesc is the grpc.ServiceDesc for NoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.note.NoteService",
	HandlerType: (*NoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreNoteV1",
			Handler:    _NoteService_StoreNoteV1_Handler,
		},
		{
			MethodName: "GetNoteV1",
			Handler:    _NoteService_GetNoteV1_Handler,
		},
		{
			MethodName: "GetNotesV1",
			Handler:    _NoteService_GetNotesV1_Handler,
		},
		{
			MethodName: "DeleteNoteV1",
			Handler:    _NoteService_DeleteNoteV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/note/note.proto",
}
