// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/password/password.proto

package password

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PasswordService_StorePasswordV1_FullMethodName  = "/proto.password.PasswordService/StorePasswordV1"
	PasswordService_GetPasswordV1_FullMethodName    = "/proto.password.PasswordService/GetPasswordV1"
	PasswordService_GetPasswordsV1_FullMethodName   = "/proto.password.PasswordService/GetPasswordsV1"
	PasswordService_UpdatePasswordV1_FullMethodName = "/proto.password.PasswordService/UpdatePasswordV1"
	PasswordService_DeletePasswordV1_FullMethodName = "/proto.password.PasswordService/DeletePasswordV1"
)

// PasswordServiceClient is the client API for PasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PasswordService provides methods for securely managing user passwords,
// including storing, retrieving, updating, and deleting password entries.
type PasswordServiceClient interface {
	// Store a new password entry.
	StorePasswordV1(ctx context.Context, in *StorePasswordV1Request, opts ...grpc.CallOption) (*StorePasswordV1Response, error)
	// Retrieve a single password entry by its ID.
	GetPasswordV1(ctx context.Context, in *GetPasswordV1Request, opts ...grpc.CallOption) (*GetPasswordV1Response, error)
	// Retrieve all stored password entries.
	GetPasswordsV1(ctx context.Context, in *GetPasswordsV1Request, opts ...grpc.CallOption) (*GetPasswordsV1Response, error)
	// Update an existing password entry.
	UpdatePasswordV1(ctx context.Context, in *UpdatePasswordV1Request, opts ...grpc.CallOption) (*UpdatePasswordV1Response, error)
	// Delete a password entry by its ID.
	DeletePasswordV1(ctx context.Context, in *DeletePasswordV1Request, opts ...grpc.CallOption) (*DeletePasswordV1Response, error)
}

type passwordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordServiceClient(cc grpc.ClientConnInterface) PasswordServiceClient {
	return &passwordServiceClient{cc}
}

func (c *passwordServiceClient) StorePasswordV1(ctx context.Context, in *StorePasswordV1Request, opts ...grpc.CallOption) (*StorePasswordV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorePasswordV1Response)
	err := c.cc.Invoke(ctx, PasswordService_StorePasswordV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) GetPasswordV1(ctx context.Context, in *GetPasswordV1Request, opts ...grpc.CallOption) (*GetPasswordV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPasswordV1Response)
	err := c.cc.Invoke(ctx, PasswordService_GetPasswordV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) GetPasswordsV1(ctx context.Context, in *GetPasswordsV1Request, opts ...grpc.CallOption) (*GetPasswordsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPasswordsV1Response)
	err := c.cc.Invoke(ctx, PasswordService_GetPasswordsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) UpdatePasswordV1(ctx context.Context, in *UpdatePasswordV1Request, opts ...grpc.CallOption) (*UpdatePasswordV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordV1Response)
	err := c.cc.Invoke(ctx, PasswordService_UpdatePasswordV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) DeletePasswordV1(ctx context.Context, in *DeletePasswordV1Request, opts ...grpc.CallOption) (*DeletePasswordV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePasswordV1Response)
	err := c.cc.Invoke(ctx, PasswordService_DeletePasswordV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordServiceServer is the server API for PasswordService service.
// All implementations must embed UnimplementedPasswordServiceServer
// for forward compatibility.
//
// PasswordService provides methods for securely managing user passwords,
// including storing, retrieving, updating, and deleting password entries.
type PasswordServiceServer interface {
	// Store a new password entry.
	StorePasswordV1(context.Context, *StorePasswordV1Request) (*StorePasswordV1Response, error)
	// Retrieve a single password entry by its ID.
	GetPasswordV1(context.Context, *GetPasswordV1Request) (*GetPasswordV1Response, error)
	// Retrieve all stored password entries.
	GetPasswordsV1(context.Context, *GetPasswordsV1Request) (*GetPasswordsV1Response, error)
	// Update an existing password entry.
	UpdatePasswordV1(context.Context, *UpdatePasswordV1Request) (*UpdatePasswordV1Response, error)
	// Delete a password entry by its ID.
	DeletePasswordV1(context.Context, *DeletePasswordV1Request) (*DeletePasswordV1Response, error)
	mustEmbedUnimplementedPasswordServiceServer()
}

// UnimplementedPasswordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPasswordServiceServer struct{}

func (UnimplementedPasswordServiceServer) StorePasswordV1(context.Context, *StorePasswordV1Request) (*StorePasswordV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorePasswordV1 not implemented")
}
func (UnimplementedPasswordServiceServer) GetPasswordV1(context.Context, *GetPasswordV1Request) (*GetPasswordV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordV1 not implemented")
}
func (UnimplementedPasswordServiceServer) GetPasswordsV1(context.Context, *GetPasswordsV1Request) (*GetPasswordsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordsV1 not implemented")
}
func (UnimplementedPasswordServiceServer) UpdatePasswordV1(context.Context, *UpdatePasswordV1Request) (*UpdatePasswordV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordV1 not implemented")
}
func (UnimplementedPasswordServiceServer) DeletePasswordV1(context.Context, *DeletePasswordV1Request) (*DeletePasswordV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePasswordV1 not implemented")
}
func (UnimplementedPasswordServiceServer) mustEmbedUnimplementedPasswordServiceServer() {}
func (UnimplementedPasswordServiceServer) testEmbeddedByValue()                         {}

// UnsafePasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordServiceServer will
// result in compilation errors.
type UnsafePasswordServiceServer interface {
	mustEmbedUnimplementedPasswordServiceServer()
}

func RegisterPasswordServiceServer(s grpc.ServiceRegistrar, srv PasswordServiceServer) {
	// If the following call pancis, it indicates UnimplementedPasswordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PasswordService_ServiceDesc, srv)
}

func _PasswordService_StorePasswordV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorePasswordV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).StorePasswordV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_StorePasswordV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).StorePasswordV1(ctx, req.(*StorePasswordV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_GetPasswordV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).GetPasswordV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_GetPasswordV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).GetPasswordV1(ctx, req.(*GetPasswordV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_GetPasswordsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).GetPasswordsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_GetPasswordsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).GetPasswordsV1(ctx, req.(*GetPasswordsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_UpdatePasswordV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).UpdatePasswordV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_UpdatePasswordV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).UpdatePasswordV1(ctx, req.(*UpdatePasswordV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_DeletePasswordV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePasswordV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).DeletePasswordV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_DeletePasswordV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).DeletePasswordV1(ctx, req.(*DeletePasswordV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PasswordService_ServiceDesc is the grpc.ServiceDesc for PasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.password.PasswordService",
	HandlerType: (*PasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StorePasswordV1",
			Handler:    _PasswordService_StorePasswordV1_Handler,
		},
		{
			MethodName: "GetPasswordV1",
			Handler:    _PasswordService_GetPasswordV1_Handler,
		},
		{
			MethodName: "GetPasswordsV1",
			Handler:    _PasswordService_GetPasswordsV1_Handler,
		},
		{
			MethodName: "UpdatePasswordV1",
			Handler:    _PasswordService_UpdatePasswordV1_Handler,
		},
		{
			MethodName: "DeletePasswordV1",
			Handler:    _PasswordService_DeletePasswordV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/password/password.proto",
}
