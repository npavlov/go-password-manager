// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/metadata/metadata.proto

package metadata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetadataService_AddMetaInfoV1_FullMethodName    = "/proto.metadata.MetadataService/AddMetaInfoV1"
	MetadataService_RemoveMetaInfoV1_FullMethodName = "/proto.metadata.MetadataService/RemoveMetaInfoV1"
	MetadataService_GetMetaInfoV1_FullMethodName    = "/proto.metadata.MetadataService/GetMetaInfoV1"
)

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MetadataService provides operations for managing custom metadata
// (key-value pairs) associated with items stored in the system.
type MetadataServiceClient interface {
	// Add or update metadata for a given item.
	AddMetaInfoV1(ctx context.Context, in *AddMetaInfoV1Request, opts ...grpc.CallOption) (*AddMetaInfoV1Response, error)
	// Remove a specific metadata entry by key from an item.
	RemoveMetaInfoV1(ctx context.Context, in *RemoveMetaInfoV1Request, opts ...grpc.CallOption) (*RemoveMetaInfoV1Response, error)
	// Retrieve all metadata for a specific item.
	GetMetaInfoV1(ctx context.Context, in *GetMetaInfoV1Request, opts ...grpc.CallOption) (*GetMetaInfoV1Response, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) AddMetaInfoV1(ctx context.Context, in *AddMetaInfoV1Request, opts ...grpc.CallOption) (*AddMetaInfoV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMetaInfoV1Response)
	err := c.cc.Invoke(ctx, MetadataService_AddMetaInfoV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RemoveMetaInfoV1(ctx context.Context, in *RemoveMetaInfoV1Request, opts ...grpc.CallOption) (*RemoveMetaInfoV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMetaInfoV1Response)
	err := c.cc.Invoke(ctx, MetadataService_RemoveMetaInfoV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetMetaInfoV1(ctx context.Context, in *GetMetaInfoV1Request, opts ...grpc.CallOption) (*GetMetaInfoV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetaInfoV1Response)
	err := c.cc.Invoke(ctx, MetadataService_GetMetaInfoV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations must embed UnimplementedMetadataServiceServer
// for forward compatibility.
//
// MetadataService provides operations for managing custom metadata
// (key-value pairs) associated with items stored in the system.
type MetadataServiceServer interface {
	// Add or update metadata for a given item.
	AddMetaInfoV1(context.Context, *AddMetaInfoV1Request) (*AddMetaInfoV1Response, error)
	// Remove a specific metadata entry by key from an item.
	RemoveMetaInfoV1(context.Context, *RemoveMetaInfoV1Request) (*RemoveMetaInfoV1Response, error)
	// Retrieve all metadata for a specific item.
	GetMetaInfoV1(context.Context, *GetMetaInfoV1Request) (*GetMetaInfoV1Response, error)
	mustEmbedUnimplementedMetadataServiceServer()
}

// UnimplementedMetadataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetadataServiceServer struct{}

func (UnimplementedMetadataServiceServer) AddMetaInfoV1(context.Context, *AddMetaInfoV1Request) (*AddMetaInfoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetaInfoV1 not implemented")
}
func (UnimplementedMetadataServiceServer) RemoveMetaInfoV1(context.Context, *RemoveMetaInfoV1Request) (*RemoveMetaInfoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMetaInfoV1 not implemented")
}
func (UnimplementedMetadataServiceServer) GetMetaInfoV1(context.Context, *GetMetaInfoV1Request) (*GetMetaInfoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaInfoV1 not implemented")
}
func (UnimplementedMetadataServiceServer) mustEmbedUnimplementedMetadataServiceServer() {}
func (UnimplementedMetadataServiceServer) testEmbeddedByValue()                         {}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetadataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_AddMetaInfoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetaInfoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).AddMetaInfoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_AddMetaInfoV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).AddMetaInfoV1(ctx, req.(*AddMetaInfoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RemoveMetaInfoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMetaInfoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RemoveMetaInfoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_RemoveMetaInfoV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RemoveMetaInfoV1(ctx, req.(*RemoveMetaInfoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetMetaInfoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaInfoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetMetaInfoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetMetaInfoV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetMetaInfoV1(ctx, req.(*GetMetaInfoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.metadata.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMetaInfoV1",
			Handler:    _MetadataService_AddMetaInfoV1_Handler,
		},
		{
			MethodName: "RemoveMetaInfoV1",
			Handler:    _MetadataService_RemoveMetaInfoV1_Handler,
		},
		{
			MethodName: "GetMetaInfoV1",
			Handler:    _MetadataService_GetMetaInfoV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/metadata/metadata.proto",
}
