// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/card/card.proto

package card

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardService_StoreCardV1_FullMethodName  = "/proto.card.CardService/StoreCardV1"
	CardService_GetCardsV1_FullMethodName   = "/proto.card.CardService/GetCardsV1"
	CardService_GetCardV1_FullMethodName    = "/proto.card.CardService/GetCardV1"
	CardService_UpdateCardV1_FullMethodName = "/proto.card.CardService/UpdateCardV1"
	CardService_DeleteCardV1_FullMethodName = "/proto.card.CardService/DeleteCardV1"
)

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CardService provides CRUD operations for securely storing and managing payment card data.
type CardServiceClient interface {
	// Store a new card in the system.
	StoreCardV1(ctx context.Context, in *StoreCardV1Request, opts ...grpc.CallOption) (*StoreCardV1Response, error)
	// Retrieve a list of all stored cards.
	GetCardsV1(ctx context.Context, in *GetCardsV1Request, opts ...grpc.CallOption) (*GetCardsV1Response, error)
	// Retrieve a specific card by its unique ID.
	GetCardV1(ctx context.Context, in *GetCardV1Request, opts ...grpc.CallOption) (*GetCardV1Response, error)
	// Update an existing card's data.
	UpdateCardV1(ctx context.Context, in *UpdateCardV1Request, opts ...grpc.CallOption) (*UpdateCardV1Response, error)
	// Delete a card by its unique ID.
	DeleteCardV1(ctx context.Context, in *DeleteCardV1Request, opts ...grpc.CallOption) (*DeleteCardV1Response, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) StoreCardV1(ctx context.Context, in *StoreCardV1Request, opts ...grpc.CallOption) (*StoreCardV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreCardV1Response)
	err := c.cc.Invoke(ctx, CardService_StoreCardV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsV1(ctx context.Context, in *GetCardsV1Request, opts ...grpc.CallOption) (*GetCardsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardsV1Response)
	err := c.cc.Invoke(ctx, CardService_GetCardsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardV1(ctx context.Context, in *GetCardV1Request, opts ...grpc.CallOption) (*GetCardV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardV1Response)
	err := c.cc.Invoke(ctx, CardService_GetCardV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) UpdateCardV1(ctx context.Context, in *UpdateCardV1Request, opts ...grpc.CallOption) (*UpdateCardV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCardV1Response)
	err := c.cc.Invoke(ctx, CardService_UpdateCardV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) DeleteCardV1(ctx context.Context, in *DeleteCardV1Request, opts ...grpc.CallOption) (*DeleteCardV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCardV1Response)
	err := c.cc.Invoke(ctx, CardService_DeleteCardV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility.
//
// CardService provides CRUD operations for securely storing and managing payment card data.
type CardServiceServer interface {
	// Store a new card in the system.
	StoreCardV1(context.Context, *StoreCardV1Request) (*StoreCardV1Response, error)
	// Retrieve a list of all stored cards.
	GetCardsV1(context.Context, *GetCardsV1Request) (*GetCardsV1Response, error)
	// Retrieve a specific card by its unique ID.
	GetCardV1(context.Context, *GetCardV1Request) (*GetCardV1Response, error)
	// Update an existing card's data.
	UpdateCardV1(context.Context, *UpdateCardV1Request) (*UpdateCardV1Response, error)
	// Delete a card by its unique ID.
	DeleteCardV1(context.Context, *DeleteCardV1Request) (*DeleteCardV1Response, error)
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardServiceServer struct{}

func (UnimplementedCardServiceServer) StoreCardV1(context.Context, *StoreCardV1Request) (*StoreCardV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreCardV1 not implemented")
}
func (UnimplementedCardServiceServer) GetCardsV1(context.Context, *GetCardsV1Request) (*GetCardsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsV1 not implemented")
}
func (UnimplementedCardServiceServer) GetCardV1(context.Context, *GetCardV1Request) (*GetCardV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardV1 not implemented")
}
func (UnimplementedCardServiceServer) UpdateCardV1(context.Context, *UpdateCardV1Request) (*UpdateCardV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardV1 not implemented")
}
func (UnimplementedCardServiceServer) DeleteCardV1(context.Context, *DeleteCardV1Request) (*DeleteCardV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardV1 not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}
func (UnimplementedCardServiceServer) testEmbeddedByValue()                     {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_StoreCardV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreCardV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).StoreCardV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_StoreCardV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).StoreCardV1(ctx, req.(*StoreCardV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsV1(ctx, req.(*GetCardsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_GetCardV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardV1(ctx, req.(*GetCardV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_UpdateCardV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).UpdateCardV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_UpdateCardV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).UpdateCardV1(ctx, req.(*UpdateCardV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_DeleteCardV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).DeleteCardV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardService_DeleteCardV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).DeleteCardV1(ctx, req.(*DeleteCardV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.card.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreCardV1",
			Handler:    _CardService_StoreCardV1_Handler,
		},
		{
			MethodName: "GetCardsV1",
			Handler:    _CardService_GetCardsV1_Handler,
		},
		{
			MethodName: "GetCardV1",
			Handler:    _CardService_GetCardV1_Handler,
		},
		{
			MethodName: "UpdateCardV1",
			Handler:    _CardService_UpdateCardV1_Handler,
		},
		{
			MethodName: "DeleteCardV1",
			Handler:    _CardService_DeleteCardV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/card/card.proto",
}
